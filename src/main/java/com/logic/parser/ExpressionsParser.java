/* Generated By:JavaCC: Do not edit this line. ExpressionsParser.java */
package com.logic.parser;

import com.logic.asts.*;

public class ExpressionsParser implements ExpressionsParserConstants {

  final public Exp parseExp() throws ParseException {
    Exp e;
    e = sequences();
    jj_consume_token(0);
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final private Exp sequences() throws ParseException {
    ASTSequence exps;
    Exp e;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(ENTER);
    }
    e = connectives();
                          exps = new ASTSequence(e);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      label_3:
      while (true) {
        jj_consume_token(ENTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
      }
      e = connectives();
                                        exps.addExp(e);
    }
        {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  final private Exp connectives() throws ParseException {
    Exp e1, e2;
    e1 = atomics();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
    case CONDITIONAL:
    case BICONDITIONAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        e2 = atomics();
                               e1 = new ASTAnd(e1, e2);
        break;
      case OR:
        jj_consume_token(OR);
        e2 = atomics();
                              e1 = new ASTOr(e1, e2);
        break;
      case CONDITIONAL:
        jj_consume_token(CONDITIONAL);
        e2 = atomics();
                                       e1 = new ASTImplication(e1, e2);
        break;
      case BICONDITIONAL:
        jj_consume_token(BICONDITIONAL);
        e2 = atomics();
                                         e1 = new ASTBiconditional(e1, e2);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final private Exp atomics() throws ParseException {
    Token t;
    Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TOP:
      jj_consume_token(TOP);
            {if (true) return new ASTTop();}
      break;
    case BOTTOM:
      jj_consume_token(BOTTOM);
               {if (true) return new ASTBottom();}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = atomics();
                          {if (true) return new ASTNot(e);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = connectives();
      jj_consume_token(RPAR);
                                      {if (true) return new ASTParenthesis(e);}
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
                 {if (true) return new ASTLiteral(t.image);}
      break;
    case GREEK:
      t = jj_consume_token(GREEK);
                  {if (true) return new ASTLiteral(t.image);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ExpressionsParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x800000,0x800000,0x7800,0x7800,0x180740,};
   }

  /** Constructor with InputStream. */
  public ExpressionsParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionsParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExpressionsParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ExpressionsParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpressionsParser(ExpressionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpressionsParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
